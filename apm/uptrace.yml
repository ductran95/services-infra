##
## Uptrace configuration file.
## See https://uptrace.dev/get/config.html for details.
##
## You can use environment variables anywhere in this file, for example:
##
##   foo: $FOO
##   bar: ${BAR}
##   baz: ${BAZ:default}
##
## To escape `$`, use `$$`, for example:
##
##   foo: $$FOO_BAR
##

##
## ClickHouse database credentials.
##
ch:
  addr: clickhouse:9000
  user: default
  password:
  database: uptrace

  # TLS configuration. Uncomment to enable.
  # tls:
  #   insecure_skip_verify: true

  # Maximum query execution time.
  max_execution_time: 30s

##
## PostgreSQL db that is used to store metadata such us metric names, dashboards, alerts,
## and so on.
##
pg:
  addr: postgres:5432
  user: uptrace
  password: uptrace
  database: uptrace

##
## A list of pre-configured projects. Each project is fully isolated.
##
projects:
  # Conventionally, the first project is used to monitor Uptrace itself.
  - id: 1
    name: Uptrace
    # Token grants write access to the project. Keep a secret.
    token: tqCMh435T82C7TSCaU8A
    pinned_attrs:
      - service.name
      - host.name
      - deployment.environment
    # Group spans by deployment.environment attribute.
    group_by_env: false
    # Group funcs spans by service.name attribute.
    group_funcs_by_service: false
    # Enable prom_compat if you want to use the project as a Prometheus datasource in Grafana.
    prom_compat: true

  - id: 2
    name: Docker Swarm
    # Token grants write access to the project. Keep a secret.
    token: srNWDSH8FG3Gur4hb4eU
    pinned_attrs:
      - service.name
      - host.name
      - deployment.environment
      - .kind
      - .status_code
    # Group spans by deployment.environment attribute.
    group_by_env: true
    # Group funcs spans by service.name attribute.
    group_funcs_by_service: true
    # Enable prom_compat if you want to use the project as a Prometheus datasource in Grafana.
    prom_compat: true

  - id: 3
    name: Traefik
    # Token grants write access to the project. Keep a secret.
    token: eHHpqm844pc8PSH33bwH
    pinned_attrs:
      - service.name
      - host.name
      - deployment.environment
      - .kind
      - .status_code
    # Group spans by deployment.environment attribute.
    group_by_env: true
    # Group funcs spans by service.name attribute.
    group_funcs_by_service: true
    # Enable prom_compat if you want to use the project as a Prometheus datasource in Grafana.
    prom_compat: true

    - id: 4
    name: Test API
    # Token grants write access to the project. Keep a secret.
    token: fFDp5PKUkSUVnLKW4Qz7
    pinned_attrs:
      - service.name
      - host.name
      - deployment.environment
      - .kind
      - .status_code
    # Group spans by deployment.environment attribute.
    group_by_env: true
    # Group funcs spans by service.name attribute.
    group_funcs_by_service: true
    # Enable prom_compat if you want to use the project as a Prometheus datasource in Grafana.
    prom_compat: true

##
## Create metrics from spans and events.
##
metrics_from_spans:
  - name: uptrace.tracing.spans
    description: Spans duration (excluding events)
    instrument: histogram
    unit: milliseconds
    value: span.duration
    attrs:
      - deployment.environment
      - service.name
      - host.name
      - .kind
      - .status_code
      - .system
    annotations:
      - display.name
    where: .event_name = ''

  - name: uptrace.tracing.events
    description: Events count (excluding spans)
    instrument: counter
    unit: 1
    value: span.count
    attrs:
      - deployment.environment
      - service.name
      - host.name
      - .kind
      - .status_code
      - .system
    annotations:
      - display.name
    where: .is_event = 1

  - name: uptrace.tracing.logs
    description: Logs count
    instrument: counter
    unit: 1
    value: span.count
    attrs:
      - deployment.environment
      - service.name
      - host.name
      - .kind
      - .status_code
      - .system
      - log.severity
    where: span.system like 'log:%'

##
## To require authentication, uncomment one of the following sections.
##
auth:
  users:
    - name: admin
      email: tv.duc95@gmail.com
      password: abcd;12345678
      notify_by_email: true

  # Cloudflare Zero Trust Access (Identity)
  # See https://developers.cloudflare.com/cloudflare-one/identity/ for more info.
  # cloudflare:
  #   # The base URL of the Cloudflare Zero Trust team.
  #   - team_url: https://myteam.cloudflareaccess.com
  #     # The Application Audience (AUD) Tag for this application.
  #     # You can retrieve this from the Cloudflare Zero Trust 'Access' Dashboard.
  #     audience: bea6df23b944e4a0cd178609ba1bb64dc98dfe1f66ae7b918e563f6cf28b37e0

##
## Various options to tweak ClickHouse schema.
## For changes to take effect, you need reset the ClickHouse database with `ch reset`.
##
ch_schema:
  # Compression codec, for example, LZ4, ZSTD(3), or Default.
  compression: ZSTD(3)

  # Whether to use ReplicatedMergeTree instead of MergeTree.
  replicated: false

  # Cluster name for Distributed tables and ON CLUSTER clause.
  #cluster: uptrace1

  spans:
    # Delete spans data after 30 days.
    ttl_delete: 90 DAY
    storage_policy: 'default'

  metrics:
    # Delete metrics data after 90 days.
    ttl_delete: 30 DAY
    storage_policy: 'default'

##
## Addresses on which Uptrace receives gRPC and HTTP requests.
##
listen:
  # OTLP/gRPC API.
  grpc:
    addr: ':14317'
    # tls:
    #   cert_file: /certs/live/npm-2/cert.pem
    #   key_file: /certs/live/npm-2/privkey.pem

  # OTLP/HTTP API and Uptrace API with UI.
  http:
    addr: ':14318'
    # tls:
    #   cert_file: /certs/live/npm-2/cert.pem
    #   key_file: /certs/live/npm-2/privkey.pem

##
## Various options for Uptrace UI.
##
site:
  # Overrides public URL for Vue-powered UI in case you put Uptrace behind a proxy.
  addr: 'https://uptrace.service.tvduc95.ovh'
  # The base path for the Vue-powered UI in case you serve Uptrace UI behind a sub path.
  path: '/'

##
## Spans processing options.
##
spans:
  # The size of the Go chan used to buffer incoming spans.
  # If the buffer is full, Uptrace starts to drop spans.
  #buffer_size: 100000

  # The number of spans to insert in a single query.
  #batch_size: 10000

##
## Metrics processing options.
##
metrics:
  # List of attributes to drop for being noisy.
  drop_attrs:
    - telemetry.sdk.language
    - telemetry.sdk.name
    - telemetry.sdk.version

  # The size of the Go chan used to buffer incoming measures.
  # If the buffer is full, Uptrace starts to drop measures.
  #buffer_size: 100000

  # The number of measures to insert in a single query.
  #batch_size: 10000

##
## uptrace-go client configuration.
## Uptrace sends internal telemetry here. Defaults to listen.grpc.addr.
##
uptrace_go:
  # dsn: http://tqCMh435T82C7TSCaU8A@localhost:14317/1
  # tls:
  #   insecure_skip_verify: true

###
### Service graph processing options.
###
service_graph:
  # Uncomment to disable.
  #disabled: true
  store:
    # Number of incomplete edges to store.
    # If the store is full, the edge is dropped.
    size: 1000000
    # For how long the incomplete edges are stored.
    ttl: 5s
    
##
## SMTP settings to send emails.
## https://uptrace.dev/get/alerting.html
##
smtp_mailer:
  enabled: true
  host: smtp.gmail.com
  port: 587
  username: ductran.auto.service@gmail.com
  password: txhvjvzhnzfswkmz
  from: 'ductran.auto.service@gmail.com'

##
## Logging configuration.
##
logs:
  # Zap minimal logging level.
  # Valid values: DEBUG, INFO, WARN, ERROR, DPANIC, PANIC, FATAL.
  level: INFO

# Secret key that is used to sign JWT tokens etc.
secret_key: 102c1a557c314fc28198acd017960843

# Enable to log HTTP requests and database queries.
debug: false
